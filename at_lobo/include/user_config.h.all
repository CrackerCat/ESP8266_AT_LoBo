/*
 * ESPRESSIF MIT License
 *
 * Copyright (c) 2016 <ESPRESSIF SYSTEMS (SHANGHAI) PTE LTD>
 *
 * Permission is hereby granted for use on ESPRESSIF SYSTEMS ESP8266 only, in which case,
 * it is free of charge, to any person obtaining a copy of this software and associated
 * documentation files (the "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the Software is furnished
 * to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or
 * substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 */

#ifndef __USER_CONFIG_H__
#define __USER_CONFIG_H__

#ifdef AT_UPGRADE_SUPPORT
#define AT_CUSTOM_UPGRADE
#endif

#define ESP_AT_LOBO_VERSION     "LoBo ESP8266_AT v1.2.1"


// -------------------
// Enable smart config
// -------------------
// Uses ~24.6 KB of Flash and 824 bytes of system RAM

#if (SPI_FLASH_SIZE_MAP > 4)
#define CONFIG_AT_SMARTCONFIG_COMMAND_ENABLE
#endif

// ---------------------
// Enable WPA Enterprise
// ---------------------
// It uses ~59.6 KB of Flash and ~5 KB of system RAM if enabled!

#if (SPI_FLASH_SIZE_MAP > 4)
#define CONFIG_AT_WPA2_ENTERPRISE_COMMAND_ENABLE
#endif

// ---------------------------------------------------------------
// This adds ~22.5 KB to free system RAM, should be always enabled
// ---------------------------------------------------------------
// Enabling it may affect the system performance,
// because the Flash cache size is decreased to only 16 KB
// os_malloc, os_zalloc and os_calloc will allocate from iRAM first,
// and dRAM will be the next available memory when iRAM is used up.

#define CONFIG_ENABLE_IRAM_MEMORY                           1


/* -------------------------------------------------------------------------------
 * Maximal size of the flash file for   512+512 firmware is 0x70000 (458752) bytes
 * Maximal size of the flash file for 1024+1024 firmware is 0xF0000 (983040) bytes
 * -------------------------------------------------------------------------------
*/

// ==== Partitions definitions ==================================================================

#define SYSTEM_PARTITION_BOOT_PARAM                         (SYSTEM_PARTITION_CUSTOMER_BEGIN + 1)
#define SYSTEM_PARTITION_USER1                              (SYSTEM_PARTITION_CUSTOMER_BEGIN + 2)
#define SYSTEM_PARTITION_USER2                              (SYSTEM_PARTITION_CUSTOMER_BEGIN + 3)


#if (SPI_FLASH_SIZE_MAP == 2)
//---------------------------
#define SPI_FLASH_SIZE                                      0x100000  // 1MB Flash   512+512
#define SYSTEM_PARTITION_OTA_SIZE                           0x6B000
#define SYSTEM_PARTITION_OTA_2_ADDR                         0x81000
//------------------------------------------------------------------------------------------

#elif (SPI_FLASH_SIZE_MAP == 3)
//-----------------------------
#define SPI_FLASH_SIZE                                      0x200000  // 2MB Flash   512x512
#define SYSTEM_PARTITION_OTA_SIZE                           0x6B000
#define SYSTEM_PARTITION_OTA_2_ADDR                         0x81000
//------------------------------------------------------------------------------------------

#elif (SPI_FLASH_SIZE_MAP == 4)
//-----------------------------
#define SPI_FLASH_SIZE                                      0x400000  // 4MB Flash   512x512
#define SYSTEM_PARTITION_OTA_SIZE                           0x6B000
#define SYSTEM_PARTITION_OTA_2_ADDR                         0x81000
//------------------------------------------------------------------------------------------

#elif (SPI_FLASH_SIZE_MAP == 5)
//-----------------------------
#define SPI_FLASH_SIZE                                      0x200000  // 2MB Flash 1024+1024
#define SYSTEM_PARTITION_OTA_SIZE                           0xD5000
#define SYSTEM_PARTITION_OTA_2_ADDR                         0x101000
//------------------------------------------------------------------------------------------

#elif (SPI_FLASH_SIZE_MAP == 6)
//-----------------------------
#define SPI_FLASH_SIZE                                      0x400000  // 4MB Flash 1024+1024
#define SYSTEM_PARTITION_OTA_SIZE                           0xD5000
#define SYSTEM_PARTITION_OTA_2_ADDR                         0x101000
//------------------------------------------------------------------------------------------

#else
#error "The flash map is not supported"
#endif
// ==============================================================================================

// define and calculate the partitions locations in Flash
#define SYSTEM_PARTITION_OTA_1_ADDR                         0x1000
#define SYSTEM_PARTITION_OTA_1_END                          (SYSTEM_PARTITION_OTA_1_ADDR + SYSTEM_PARTITION_OTA_SIZE)

// Positioned at absolute location, used also by the bootloader
#define SYSTEM_PARTITION_BOOT_PARAMETER_ADDR                0xFA000 // First MByte - 0x6000

// Positioned at the end of SPI-Flash (5 sectors)
#define SYSTEM_PARTITION_RF_CAL_ADDR                        (SPI_FLASH_SIZE-0x5000)
#define SYSTEM_PARTITION_PHY_DATA_ADDR                      (SPI_FLASH_SIZE-0x4000)
#define SYSTEM_PARTITION_SYSTEM_PARAMETER_ADDR              (SPI_FLASH_SIZE-0x3000) // 3 sectors

// Positioned at the end of the 1st OTA-1 partition (5 or 7 sectors)
#define SYSTEM_PARTITION_SSL_CLIENT_CA_ADDR                 (SYSTEM_PARTITION_OTA_1_END + 0x0000)
#define SYSTEM_PARTITION_SSL_CLIENT_CERT_PRIVKEY_ADDR       (SYSTEM_PARTITION_OTA_1_END + 0x1000)
#define SYSTEM_PARTITION_AT_PARAMETER_ADDR                  (SYSTEM_PARTITION_OTA_1_END + 0x2000) // 3 sectors

#ifdef CONFIG_AT_WPA2_ENTERPRISE_COMMAND_ENABLE
#define SYSTEM_PARTITION_WPA2_ENTERPRISE_CA_ADDR            (SYSTEM_PARTITION_OTA_1_END + 0x5000)
#define SYSTEM_PARTITION_WPA2_ENTERPRISE_CERT_PRIVKEY_ADDR  (SYSTEM_PARTITION_OTA_1_END + 0x6000)
#endif

#endif
